Kyle Johnson CS31

Project 5 write up

Notable Obstacles:
    There were a lot of notable obstacles for this project. The first issue arrived when I tried to outf a line that was shorter 
    than the previous one. Since I did not move the \0 char in the cstring, the end of my new line had characters from the 
    previous one. I fixed this with memset() function. Next, the approach I took was very convuluted and not full proof.
    Since I look at each character one at a time and determine what to do, it became difficult to process punctutation.
    I had no way to know whether the next char was a space or a normal character, so I did not know whether to include a
    second space like the specs say. This caused me a lot of grief but I ultimately fixed it by writing rotateLeft and right 
    functions. Lastly, it was very difficult to know how to process a period at the end of a line. Since I delete my lines
    memory, I usually put a period and a space at the end of a line. However, when the next line starts processing it has no
    idea whether the sequence of characters were a punctutation or not, so it would not repeat a space. That mean my word 
    segment that ended in punctuation had a single space. If I edited the code to allow a second space, words that DID NOT 
    have a punctuation had two spaces.

Brief Description:
    The general idea of my code is to go character by character and process it individually. Then, when I reach the max line
    length I would go back and look at the line holistically to see where I should include my \n. The caviat is that there are 
    many different outcomes, like punctuation or spaces at the end of lines that make my code more messy.

    I had 4 helper functions:
        1. rotateLeft. This function takes the start and end index of the array and rotates everything left once. I never want to
            rotate the entire array, so it is essential to have the start index. The end index is to know how long to loop.
        2. rotateRight. This function is the same as rotateLeft but the opposite direction. This is useful for inserting characters
            at a certain location in my array without having to replace an important character.
        3. findLastSpace. This function loops backwards from the end of my array until it finds a space. This is essential because
            sometimes I incorrectly put a space after punctuation, and when I correct it I need to adjust my space tracker.
        4. isTargetPunc. This function returns true if the given character is a '.' '?' '!' or ':'. The specs clarify that these
            are the only puncutation to be treated specially, so this function saves me code redundancy and compactness.

    In terms of the actual render function it follows this pseuedocode:
        
        declare variables to track characters and indexes
        while my infile has more characters continue looping
            if my character is @ and the last three were ' ' '@' 'P'
                input a paragraph break and reset variables
            else if the number of chars on the line is = to the lineLength max 
                if the current character is whitespace
                    if the character before this is a space
                        replace the character before this with a \n
                    otherwise
                        put a \n at the end of line
                if the current char is a special punctuation
                    if the last breakable point was a double space
                        replace the first space with \n and rotate line left
                        put a space after the char 
                    else if the last breakable point was a single space
                        replace that single space with a \n
                        put a space after the char
                    else (must be a hyphen)
                        rotate the array right once after the hyphen insert a \n in the open spot
                        put a space after the char
                else(it is a normal char)
                    if their has been no spaces or hyphens
                        record so in a boolean for later and break the word in half by putting a \need
                    if the last breakable spot was a double space 
                        change the first one to a \n and rotate the array left once.
                    else if the last breakable point was a single space
                        replace this space with a \n
                    else (must be a hyphen)
                        rotate the array right once after the hyphen insert a \n in the open spot
            else if the number of chars on the line is > lineLength max
                replace the last char on line with \n 
                if the current char is not a space
                    add the current char to the end of line after the \n
                if it is a space
                    do nothing with the current char 
            otherwise
                if the current char is a punctuation
                    if the last 2 characters were just a punctuation and a space
                        replace the last space with the current punctuation
                    otherwise
                        add the punctuation to end of line and add a space after that
                if the current char is a space
                    if there was just a paragraph break
                        ignore the space and go to the next char
                    if characters spilled over to the new output line and my line cstring is empty
                        add a space to the end of line
                    if there are no characters on the output line
                        do not add the space to the end of line
                    if the last char was a space
                        if the char before that was a special punctuation
                            add the space
                        if not
                            do not add the space
                    otherwise
                        add the space
                else
                    if the char is a hyphen
                        record so on the tracker and continue normally
                    if this is not the first char to be added to the line cstring
                        if the char 2 elements ago is a target punctuation
                            if the last char was a space 
                                replace that space with the current target punctuation
                                use helper function findLastSpace to track the last space
                            otherwise
                                put the current punctuation at the current index
                        if not a special punctuation
                            add the current char to the end of line
                    else
                        add the current char to the end of the line
            if this is the 3rd or more char
                store the last 3 chars
            if this is the 2nd char
                store the last 2 chars
            if this is the first char
                store this char
        
        print the last line, ignoring the trailing spaces

        if a word has been broken in half
            return 1
        return 0
                

Test cases:
    follows the below format
    case # | (text,lineLength) | (expected output, returnVal) | why
    ------------------------------------------------------
    1. ("Kyle. Johnson was here.",1) | ("K\ny\nl\ne\n.\nJ\no\nh\nn\ns\no\nn\nw\na\ns\nh\ne\nr\ne\n.\n",1) | checks broken words return properly
    2. ("Kyle. John\nKyle: John\nKyle? John\nKyle! John",15) | ("Kyle.  John\nKyle?  John\nKyle!  John\nKyle:  John\n",0) | checks all special punctuation
    3. ("Kyle. Johnson",5) | ("Kyle.\nJohns\non\n",1) | checks that there is no extra space after punctuation at end of line
    4. ("Kyle @P@ Johnson", 15) | ("Kyle\n\nJohnson\n",0) | checks paragraph breaks work properly
    5. ("Kyle... Johnson", 15) | ("Kyle...\nJohnson\n",0) | checks that consecutive punctuation works correctly
    6. ("Mr.Johnson", 15) | ("Mr.Johnson\n",0) | checks that punctuation that does not end a word segment works properly
    7. ("Hello  my name is  Kyle",25) |("Hello my name is Kyle\n",0) | checks that double spaces do not get processed twice
    8. ("1234123412341234",4) | ("1234\n1234\n1234\n1234\n",1) | checks that words with no spaces longer than length still get processed correctly
    9. ("12341234-12341234",10) | ("12341234-\n12341234\n",0) | checks that hyphens work in general
    10. ("Hello kyle-johnson",10) | ("Hello kyle-\njohnson\n",0) | checks that hyphens after spaces work
    11. ("kyle-johnson hello",13) | ("kyle-johnson\nhello\n",0) | checks that spaces after hyphens work
    12. ("Kyle\n",4) |("Kyle\n",0) | checks that ending \n work properly
    13. ("Kyle Johnson",0) | (N/A,2) | checks for invalid lineLength parameter
    14. ("Doctor Smallberg",10) | ("Doctor\nSmallberg\n") | checks that line is split even when current char is nonspace.
    15. ("cotton--candy",7) | ("cotton-\n-candy\n",0) | checks that the first hyphen in a double hyphen works
    16. ("cotton--candy",8) | ("cotton--\ncandy\n",0) | checks that the second hyphen in a double hyphen works
    17. ("Kyle.\n",5) | ("Kyle.\n",0) | checks correct ending when line ends with punctuation and there are no more chars
    18. ("Kyle\n\n\n",10) | ("Kyle\n",0) checks that extra whitespace is not processed
    19. ("Kyle... Johnson\n",20) |("Kyle...  Johnson") | Checks that consecutive punctuation on one line works correctly. (2 spaces)
    20. (" kyle j",10) | ("kyle j\n",0) | checks that leading spaces are not printed for my code
    21. ("\nkyle j",10) | ("kyle j\n",0) | checks that leading newLine characters are not printed
    22. ("Kyle\tJ",10) | ("Kyle j\n",0) | checks that tabs are replaced with spaces
    23. ("\tKyle J",10) | ("kyle J\n",0) | checks that leading tabs are ignored
    24. ("",10) | ("",0) | checks that empty files do not get processed
    More tests:
       
       The input...
       
        It always does seem to me that I am doing more work than
        I should do. It is not that I object to the work, mind you;
        I like work: it fascinates me.       I can sit and look at it for hours.
        I love to keep     it by me: the idea of getting
        rid
        of it nearly breaks my heart. @P@ You cannot give me too
        much work; to accumulate work has almost become


        a passion with me: my study is so full of it now, that there is hardly
        an inch of room for any more.

        ... is tested with lineLength 40-50. This tests various line endings, whitespace handling, and @P@ code. It also tests
            for a little bit larger input length.
    
    
    Fails:
    ("kyle...",7) ending ... at perfect lineLength ending
    ("kyle...",5) wrong return code when ... split in half
    ("Kyle @P@ @P@ was here", 30) back to back @P@ should only have one paragraph break
    ("1234-1234-1234",2) when words after the - are broken it breaks 
    ("Kyle @P@L hello",25) @P@ is not a word segment but my code still paragraph breaks
    ("Hello @P@ world",5) fails when @P@ starts the line 